
package mocks

import (

    "github.com/kika1s1/task_manager/domain"
    "github.com/stretchr/testify/mock"
    "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockTaskRepository is an autogenerated mock type for the TaskRepository type
type MockTaskRepository struct {
    mock.Mock
}

// CreateTask provides a mock function with given fields: task
func (_m *MockTaskRepository) CreateTask(task domain.Task) error {
    ret := _m.Called(task)

    var r0 error
    if rf, ok := ret.Get(0).(func(domain.Task) error); ok {
        r0 = rf(task)
    } else {
        r0 = ret.Error(0)
    }

    return r0
}

// GetTasks provides a mock function with given fields:
func (_m *MockTaskRepository) GetTasks() ([]domain.Task, error) {
    ret := _m.Called()

    var r0 []domain.Task
    if rf, ok := ret.Get(0).(func() []domain.Task); ok {
        r0 = rf()
    } else {
        if ret.Get(0) != nil {
            r0 = ret.Get(0).([]domain.Task)
        }
    }

    var r1 error
    if rf, ok := ret.Get(1).(func() error); ok {
        r1 = rf()
    } else {
        r1 = ret.Error(1)
    }

    return r0, r1
}

// GetTaskByID provides a mock function with given fields: id
func (_m *MockTaskRepository) GetTaskByID(id primitive.ObjectID) (domain.Task, error) {
    ret := _m.Called(id)

    var r0 domain.Task
    if rf, ok := ret.Get(0).(func(primitive.ObjectID) domain.Task); ok {
        r0 = rf(id)
    } else {
        r0 = ret.Get(0).(domain.Task)
    }

    var r1 error
    if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
        r1 = rf(id)
    } else {
        r1 = ret.Error(1)
    }

    return r0, r1
}

// UpdateTask provides a mock function with given fields: id, updatedTask
func (_m *MockTaskRepository) UpdateTask(id primitive.ObjectID, updatedTask domain.Task) error {
    ret := _m.Called(id, updatedTask)

    var r0 error
    if rf, ok := ret.Get(0).(func(primitive.ObjectID, domain.Task) error); ok {
        r0 = rf(id, updatedTask)
    } else {
        r0 = ret.Error(0)
    }

    return r0
}

// DeleteTask provides a mock function with given fields: id
func (_m *MockTaskRepository) DeleteTask(id primitive.ObjectID) error {
    ret := _m.Called(id)

    var r0 error
    if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
        r0 = rf(id)
    } else {
        r0 = ret.Error(0)
    }

    return r0
}
